name: Build x86-64 Firmware

on:
  release:
    types: [published]
  push:
    branches:
      - master
    paths:
      - '.github/workflows/build-x86-64-firmware.yml'

env:
  TZ: Asia/Shanghai
  REPO_URL: https://github.com/immortalwrt/immortalwrt
  REPO_BRANCH: master
  PLATFORM_FILE: amd64.config
  CONFIG_FILE: immortalwrt.config
  CHECK_CONFIG: true

  PREPARE_SH: prepare.sh
  POST_INSTALL_SH: post-install.sh

  SSH_ACTIONS: ${{ secrets.OPENWRT_ENABLE_SSH }}
  OPENWRT_ROOT_PASSWORD: ${{ secrets.OPENWRT_ROOT_PASSWORD }}

  UPLOAD_BIN_DIR: false
  UPLOAD_FIRMWARE: true
  UPLOAD_RELEASE: true

  TOOLCHAIN_TAG: toolchain

jobs:
  toolchain:
    runs-on: ubuntu-20.04

    steps:
      - name: Initialization Environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install squashfs-tools $(curl -fsSL git.io/depends-ubuntu-2004)
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          docker image prune -a -f

      - name: Checkout
        uses: actions/checkout@main

      - name: Fetch openwrt source code
        run: |
          df -hT $PWD
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
          cd openwrt
          echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
          echo "OPENWRT_GIT_REF=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Generate Toolchain Config
        working-directory: ${{ env.OPENWRT_PATH }}
        run: |
          PLATFORM_PATH="${GITHUB_WORKSPACE}/${PLATFORM_FILE}"
          CONFIG_PATH="${GITHUB_WORKSPACE}/${CONFIG_FILE}"

          [ -e $PLATFORM_PATH ] && mv $PLATFORM_PATH .config
          [ -e $CONFIG_PATH ] && cat $CONFIG_PATH >> .config

          echo -e "\nCONFIG_ALL=y" >> .config
          echo -e "\nCONFIG_ALL_NONSHARED=y" >> .config
          make defconfig > /dev/null 2>&1

      - name: Cache Toolchain
        id: cache-toolchain
        uses: actions/cache@v3
        with:
          path: toolchain
          key: ${{ runner.os }}-opwnert-toolchain-${{ env.OPENWRT_GIT_REF }}
          restore-keys: |
            ${{ runner.os }}-opwnert-toolchain-

      - name: Install Feeds
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        working-directory: ${{ env.OPENWRT_PATH }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          make defconfig

      - name: Compile Tools
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        working-directory: ${{ env.OPENWRT_PATH }}
        run: |
          echo -e "$(nproc) thread compile"
          make tools/compile -j$(nproc) || make tools/compile -j1 V=s

      - name: Compile Toolchain
        if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        working-directory: ${{ env.OPENWRT_PATH }}
        run: |
          echo -e "$(nproc) thread compile"
          make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
          rm -rf .config* dl bin

      - name: Generate Toolchain Image
        working-directory: ${{ github.workspace }}
        run: |
          mksquashfs openwrt $TOOLCHAIN_IMAGE -force-gid 1001 -force-uid 1001 -comp zstd
          mkdir -p toolchain
          split -d -b 1900M $TOOLCHAIN_IMAGE toolchain/$TOOLCHAIN_IMAGE.img.
          rm $TOOLCHAIN_IMAGE

      # - name: Upload Toolchain Image To Artifact
      #   uses: actions/upload-artifact@main
      #   with:
      #     name: ${{ env.TOOLCHAIN_IMAGE }}
      #     path: toolchain

      # - name: Delete Old Toolchain Assets From Release
      #   uses: mknejp/delete-release-assets@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ env.TOOLCHAIN_TAG }}
      #     assets: "toolchain-${{ env.TOOLCHAIN_IMAGE }}.*"
      #     fail-if-no-assets: false
      #     fail-if-no-release: false

      # - name: Upload Toolchain Image To Release
      #   uses: ncipollo/release-action@v1.8.0
      #   with:
      #     name: toolchain-image
      #     allowUpdates: true
      #     replacesArtifacts: true
      #     commit: ${{ github.ref_name }}
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag: ${{ env.TOOLCHAIN_TAG }}
      #     artifacts: output/*
